// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Winner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Winner entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Winner must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Winner", id.toString(), this);
    }
  }

  static load(id: string): Winner | null {
    return changetype<Winner | null>(store.get("Winner", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get players(): Array<Bytes> {
    let value = this.get("players");
    return value!.toBytesArray();
  }

  set players(value: Array<Bytes>) {
    this.set("players", Value.fromBytesArray(value));
  }

  get gameId(): BigInt | null {
    let value = this.get("gameId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gameId(value: BigInt | null) {
    if (!value) {
      this.unset("gameId");
    } else {
      this.set("gameId", Value.fromBigInt(<BigInt>value));
    }
  }

  get game(): string {
    let value = this.get("game");
    return value!.toString();
  }

  set game(value: string) {
    this.set("game", Value.fromString(value));
  }
}

export class Game extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Game entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Game must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Game", id.toString(), this);
    }
  }

  static load(id: string): Game | null {
    return changetype<Game | null>(store.get("Game", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get people(): Array<Bytes> {
    let value = this.get("people");
    return value!.toBytesArray();
  }

  set people(value: Array<Bytes>) {
    this.set("people", Value.fromBytesArray(value));
  }

  get gameId(): BigInt | null {
    let value = this.get("gameId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gameId(value: BigInt | null) {
    if (!value) {
      this.unset("gameId");
    } else {
      this.set("gameId", Value.fromBigInt(<BigInt>value));
    }
  }

  get gameType(): string {
    let value = this.get("gameType");
    return value!.toString();
  }

  set gameType(value: string) {
    this.set("gameType", Value.fromString(value));
  }

  get status(): boolean {
    let value = this.get("status");
    return value!.toBoolean();
  }

  set status(value: boolean) {
    this.set("status", Value.fromBoolean(value));
  }
}

export class Round extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Round entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Round must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Round", id.toString(), this);
    }
  }

  static load(id: string): Round | null {
    return changetype<Round | null>(store.get("Round", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get countryIds(): Array<string> {
    let value = this.get("countryIds");
    return value!.toStringArray();
  }

  set countryIds(value: Array<string>) {
    this.set("countryIds", Value.fromStringArray(value));
  }
}

export class Team extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Team entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Team must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Team", id.toString(), this);
    }
  }

  static load(id: string): Team | null {
    return changetype<Team | null>(store.get("Team", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get level(): BigInt {
    let value = this.get("level");
    return value!.toBigInt();
  }

  set level(value: BigInt) {
    this.set("level", Value.fromBigInt(value));
  }

  get team(): Bytes {
    let value = this.get("team");
    return value!.toBytes();
  }

  set team(value: Bytes) {
    this.set("team", Value.fromBytes(value));
  }

  get predictor(): Bytes {
    let value = this.get("predictor");
    return value!.toBytes();
  }

  set predictor(value: Bytes) {
    this.set("predictor", Value.fromBytes(value));
  }
}

export class Levelup extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Levelup entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Levelup must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Levelup", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Levelup | null {
    return changetype<Levelup | null>(store.get("Levelup", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get prevLevel(): BigInt {
    let value = this.get("prevLevel");
    return value!.toBigInt();
  }

  set prevLevel(value: BigInt) {
    this.set("prevLevel", Value.fromBigInt(value));
  }

  get nowLevel(): BigInt {
    let value = this.get("nowLevel");
    return value!.toBigInt();
  }

  set nowLevel(value: BigInt) {
    this.set("nowLevel", Value.fromBigInt(value));
  }
}

export class Predictor extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Predictor entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Predictor must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Predictor", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Predictor | null {
    return changetype<Predictor | null>(
      store.get("Predictor", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get tokens(): Array<string> | null {
    let value = this.get("tokens");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tokens(value: Array<string> | null) {
    if (!value) {
      this.unset("tokens");
    } else {
      this.set("tokens", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class TopPoint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TopPoint entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TopPoint must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TopPoint", id.toString(), this);
    }
  }

  static load(id: string): TopPoint | null {
    return changetype<TopPoint | null>(store.get("TopPoint", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get top(): BigInt {
    let value = this.get("top");
    return value!.toBigInt();
  }

  set top(value: BigInt) {
    this.set("top", Value.fromBigInt(value));
  }

  get second(): BigInt {
    let value = this.get("second");
    return value!.toBigInt();
  }

  set second(value: BigInt) {
    this.set("second", Value.fromBigInt(value));
  }

  get third(): BigInt {
    let value = this.get("third");
    return value!.toBigInt();
  }

  set third(value: BigInt) {
    this.set("third", Value.fromBigInt(value));
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Swap entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Swap must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Swap", id.toString(), this);
    }
  }

  static load(id: string): Swap | null {
    return changetype<Swap | null>(store.get("Swap", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get first(): Bytes {
    let value = this.get("first");
    return value!.toBytes();
  }

  set first(value: Bytes) {
    this.set("first", Value.fromBytes(value));
  }

  get second(): Bytes {
    let value = this.get("second");
    return value!.toBytes();
  }

  set second(value: Bytes) {
    this.set("second", Value.fromBytes(value));
  }
}
