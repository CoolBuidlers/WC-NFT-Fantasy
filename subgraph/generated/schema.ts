// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Winner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Winner entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Winner must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Winner", id.toString(), this);
    }
  }

  static load(id: string): Winner | null {
    return changetype<Winner | null>(store.get("Winner", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get players(): Array<Bytes> {
    let value = this.get("players");
    return value!.toBytesArray();
  }

  set players(value: Array<Bytes>) {
    this.set("players", Value.fromBytesArray(value));
  }

  get gameId(): BigInt | null {
    let value = this.get("gameId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gameId(value: BigInt | null) {
    if (!value) {
      this.unset("gameId");
    } else {
      this.set("gameId", Value.fromBigInt(<BigInt>value));
    }
  }

  get game(): string {
    let value = this.get("game");
    return value!.toString();
  }

  set game(value: string) {
    this.set("game", Value.fromString(value));
  }
}

export class Game extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Game entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Game must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Game", id.toString(), this);
    }
  }

  static load(id: string): Game | null {
    return changetype<Game | null>(store.get("Game", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get people(): Array<Bytes> | null {
    let value = this.get("people");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set people(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("people");
    } else {
      this.set("people", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get gameId(): BigInt | null {
    let value = this.get("gameId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gameId(value: BigInt | null) {
    if (!value) {
      this.unset("gameId");
    } else {
      this.set("gameId", Value.fromBigInt(<BigInt>value));
    }
  }

  get gameType(): string {
    let value = this.get("gameType");
    return value!.toString();
  }

  set gameType(value: string) {
    this.set("gameType", Value.fromString(value));
  }

  get status(): boolean {
    let value = this.get("status");
    return value!.toBoolean();
  }

  set status(value: boolean) {
    this.set("status", Value.fromBoolean(value));
  }
}

export class Round extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Round entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Round must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Round", id.toString(), this);
    }
  }

  static load(id: string): Round | null {
    return changetype<Round | null>(store.get("Round", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get countryIds(): Array<BigInt> {
    let value = this.get("countryIds");
    return value!.toBigIntArray();
  }

  set countryIds(value: Array<BigInt>) {
    this.set("countryIds", Value.fromBigIntArray(value));
  }
}

export class Tokens extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Tokens entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Tokens must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Tokens", id.toString(), this);
    }
  }

  static load(id: string): Tokens | null {
    return changetype<Tokens | null>(store.get("Tokens", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value!.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get position(): i32 {
    let value = this.get("position");
    return value!.toI32();
  }

  set position(value: i32) {
    this.set("position", Value.fromI32(value));
  }

  get teamId(): Bytes {
    let value = this.get("teamId");
    return value!.toBytes();
  }

  set teamId(value: Bytes) {
    this.set("teamId", Value.fromBytes(value));
  }

  get level(): i32 {
    let value = this.get("level");
    return value!.toI32();
  }

  set level(value: i32) {
    this.set("level", Value.fromI32(value));
  }

  get predictors(): Bytes {
    let value = this.get("predictors");
    return value!.toBytes();
  }

  set predictors(value: Bytes) {
    this.set("predictors", Value.fromBytes(value));
  }
}

export class Predictors extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Predictors entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Predictors must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Predictors", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Predictors | null {
    return changetype<Predictors | null>(
      store.get("Predictors", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get mints(): Array<string> {
    let value = this.get("mints");
    return value!.toStringArray();
  }

  set mints(value: Array<string>) {
    this.set("mints", Value.fromStringArray(value));
  }
}

export class TopPoint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TopPoint entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TopPoint must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TopPoint", id.toString(), this);
    }
  }

  static load(id: string): TopPoint | null {
    return changetype<TopPoint | null>(store.get("TopPoint", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get top(): BigInt {
    let value = this.get("top");
    return value!.toBigInt();
  }

  set top(value: BigInt) {
    this.set("top", Value.fromBigInt(value));
  }

  get second(): BigInt {
    let value = this.get("second");
    return value!.toBigInt();
  }

  set second(value: BigInt) {
    this.set("second", Value.fromBigInt(value));
  }

  get third(): BigInt {
    let value = this.get("third");
    return value!.toBigInt();
  }

  set third(value: BigInt) {
    this.set("third", Value.fromBigInt(value));
  }
}
